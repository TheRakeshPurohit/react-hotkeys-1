{"version":3,"sources":["../../src/index.tsx","../README.md","App.tsx","index.tsx"],"names":["constructor","isKeyDown","handle","componentDidMount","this","splitKey","Hotkeys","props","document","componentWillUnmount","onKeyUp","disabled","onKeyDown","handleKeyUpEvent","keyName","indexOf","render","children","React","ReactHotkeys","defaultProps","filter","target","event","tagName","propTypes","PropTypes","App","state","info","output","shortcut","e","console","log","setState","className","user","repo","Social","type","href","bind","source","replace","PureComponent","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.2f9a936d.chunk.js","sourcesContent":["import React from 'react';\nimport * as PropTypes from 'prop-types';\nimport Hotkeys, { HotkeysEvent } from 'hotkeys-js';\n\nexport type OnKeyFun = (shortcut: string, evn: KeyboardEvent, handle: HotkeysEvent) => void;\n\nexport interface IReactHotkeysProps {\n  keyName?: string;\n  filter?: (event: KeyboardEvent) => boolean;\n  onKeyUp?: OnKeyFun;\n  onKeyDown?: OnKeyFun;\n  allowRepeat?: boolean;\n  disabled?: boolean;\n  splitKey?: string;\n}\n\nexport default class ReactHotkeys extends React.Component<IReactHotkeysProps> {\n  public static defaultProps: IReactHotkeysProps = {\n    filter(event: KeyboardEvent) {\n      const target = (event.target as HTMLElement) || event.srcElement;\n      var tagName = target.tagName;\n      return !(target.isContentEditable || tagName === 'INPUT' || tagName === 'SELECT' || tagName === 'TEXTAREA');\n    },\n  }\n  static propTypes = {\n    keyName: PropTypes.string,\n    filter: PropTypes.func,\n    onKeyDown: PropTypes.func,\n    onKeyUp: PropTypes.func,\n    disabled: PropTypes.bool,\n    splitKey: PropTypes.string\n  }\n  public isKeyDown: boolean = false;\n  public handle: HotkeysEvent;\n  constructor(props: IReactHotkeysProps) {\n    super(props);\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.onKeyUp = this.onKeyUp.bind(this);\n    this.handleKeyUpEvent = this.handleKeyUpEvent.bind(this);\n    this.handle = {} as HotkeysEvent;\n  }\n  componentDidMount() {\n    const { filter, splitKey } = this.props;\n    if (filter) {\n      Hotkeys.filter = filter;\n    }\n    Hotkeys.unbind(this.props.keyName as string);\n    Hotkeys(this.props.keyName as string, { splitKey }, this.onKeyDown);\n    document && document.body.addEventListener('keyup', this.handleKeyUpEvent);\n  }\n  componentWillUnmount() {\n    Hotkeys.unbind(this.props.keyName as string);\n    this.isKeyDown = true;\n    this.handle = {} as HotkeysEvent;\n    document && document.body.removeEventListener('keyup', this.handleKeyUpEvent);\n  }\n  onKeyUp(e: KeyboardEvent, handle: HotkeysEvent) {\n    const { onKeyUp, disabled } = this.props;\n    !disabled && onKeyUp && onKeyUp(handle.shortcut, e, handle)\n  }\n  onKeyDown(e: KeyboardEvent, handle: HotkeysEvent) {\n    const { onKeyDown, allowRepeat, disabled } = this.props;\n    if (this.isKeyDown && !allowRepeat) return;\n    this.isKeyDown = true;\n    this.handle = handle;\n    !disabled && onKeyDown && onKeyDown(handle.shortcut, e, handle)\n  }\n  handleKeyUpEvent(e: KeyboardEvent) {\n    if (!this.isKeyDown) return;\n    this.isKeyDown = false;\n    if (this.props.keyName && this.props.keyName.indexOf(this.handle.shortcut) < 0) return;\n    this.onKeyUp(e, this.handle);\n    this.handle = {} as HotkeysEvent;\n  }\n  render() {\n    return this.props.children || null;\n  }\n}\n","export default \"react-hotkeys\\n---\\n\\n[![Build & Deploy](https://github.com/jaywcjlove/react-hotkeys/workflows/Build%20&%20Deploy/badge.svg)](https://github.com/jaywcjlove/react-hotkeys/actions)\\n[![npm package](https://img.shields.io/npm/v/react-hot-keys.svg)](https://www.npmjs.org/package/react-hot-keys) [![Coveralls](https://img.shields.io/coveralls/jaywcjlove/react-hotkeys/master.svg)](https://coveralls.io/github/jaywcjlove/react-hotkeys)\\n\\n<!--dividing-->\\n\\nReact component to listen to keydown and keyup keyboard events, defining and  dispatching keyboard shortcuts. Uses a fork of [hotkeys.js](https://github.com/jaywcjlove/hotkeys) for keydown detection of special characters. You give it a keymap of shortcuts & it bind it to the mousetrap singleton. The, it'll unbind it when the component unmounts.\\n\\n> [react-hotkeys-hook](https://github.com/JohannesKlauss/react-hotkeys-hook) - React hook for using keyboard shortcuts in components. Make sure that you have at least version 16.8 of react and react-dom installed, or otherwise hooks won't work for you.\\n\\n## Example\\n\\n### Install\\n\\n```sh\\nnpm i -S react-hot-keys\\n```\\n\\n### Demo\\n\\nPreview [demo](https://jaywcjlove.github.io/react-hotkeys/). \\n\\n- [Codepen example](https://codepen.io/jaywcjlove/pen/bJxbwG).\\n- [CodesandBox Example](https://codesandbox.io/s/hotkeys-116-8rge8)\\n\\n```js\\nimport React from 'react';\\nimport Hotkeys from 'react-hot-keys';\\n\\nexport default class HotkeysDemo extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      output: 'Hello, I am a component that listens to keydown and keyup of a',\\n    }\\n  }\\n  onKeyUp(keyName, e, handle) {\\n    console.log(\\\"test:onKeyUp\\\", e, handle)\\n    this.setState({\\n      output: `onKeyUp ${keyName}`,\\n    });\\n  }\\n  onKeyDown(keyName, e, handle) {\\n    console.log(\\\"test:onKeyDown\\\", keyName, e, handle)\\n    this.setState({\\n      output: `onKeyDown ${keyName}`,\\n    });\\n  }\\n  render() {\\n    return (\\n      <Hotkeys \\n        keyName=\\\"shift+a,alt+s\\\" \\n        onKeyDown={this.onKeyDown.bind(this)}\\n        onKeyUp={this.onKeyUp.bind(this)}\\n      >\\n        <div style={{ padding: \\\"50px\\\" }}>\\n          {this.state.output}\\n        </div>\\n      </Hotkeys>\\n    )\\n  }\\n}\\n```\\n## API \\n\\n### keyName\\n\\nSupported keys `⇧`, `shift`, `option`, `⌥`, `alt`, `ctrl`, `control`, `command`, `⌘` .\\n\\n`⌘` Command()  \\n`⌃` Control  \\n`⌥` Option(alt)  \\n`⇧` Shift  \\n`⇪` Caps Lock   \\n~~`fn` Function key is `fn` (not supported)~~  \\n`↩︎` return/enter\\n`space` space keys\\n\\n### onKeyDown\\n\\nCallback function to be called when user pressed the target buttons\\n`space` space keys\\n\\n### onKeyUp\\n\\nCallback function to be called when user key uped the target buttons\\n\\n### allowRepeat\\n\\n> allowRepeat?: boolean;\\n\\n`allowRepeat` to allow auto repeating key down\\n\\n\\n### disabled\\n\\n> disabled?: boolean;\\n\\nDisable `onKeyDown` and `onKeyUp` events. Default: `undefined`\\n\\n### filter\\n\\n`INPUT` `SELECT` `TEXTAREA` default does not handle. `filter` to return to the true shortcut keys set to play a role, flase shortcut keys set up failure.\\n\\n```diff\\n<Hotkeys \\n  keyName=\\\"shift+a,alt+s\\\" \\n+  filter={(event) => {\\n+    return true;\\n+  }}\\n  onKeyDown={this.onKeyDown.bind(this)}\\n  onKeyUp={this.onKeyUp.bind(this)}\\n/>\\n```\\n\\n## License\\n\\nMIT\\n\";","import React from 'react';\nimport { HotkeysEvent } from 'hotkeys-js';\nimport { Github } from '@uiw/react-shields';\nimport GitHubCorners from '@uiw/react-github-corners';\nimport MarkdownPreview from '@uiw/react-markdown-preview';\nimport Hotkeys from '../';\nimport MDStr from '../README.md';\nimport './App.less';\n\nexport interface AppProps {}\nexport interface AppState {\n  output?: string;\n  info?: string;\n  shortcut?: string;\n}\n\nexport default class App extends React.PureComponent<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      info: 'Hello, I am a component that listens to keydown and keyup of a',\n      output: '',\n      shortcut: '',\n    }\n  }\n  onKeyUp(keyName: string, e: KeyboardEvent, handle: HotkeysEvent) {\n    console.log(\"test:onKeyUp\", e, handle)\n    this.setState({\n      output: `onKeyUp ${keyName}`,\n      shortcut: '',\n    });\n  }\n  onKeyDown(keyName: string, e: KeyboardEvent, handle: HotkeysEvent) {\n    console.log(\"test:onKeyDown\", keyName, e, handle)\n    this.setState({\n      output: `onKeyDown ${keyName}`,\n      shortcut: handle.shortcut,\n    });\n  }\n  render () {\n    const {shortcut, output} = this.state;\n    return (\n      <div className=\"warpper\">\n        <h1>React Hotkeys</h1>\n        <Github user=\"jaywcjlove\" repo=\"react-hotkeys\">\n          <Github.Social type=\"forks\" href=\"https://github.com/jaywcjlove/react-hotkeys/network/members\" />\n          <Github.Social type=\"stars\" href=\"https://github.com/jaywcjlove/react-hotkeys/stargazers\" />\n          <Github.Social type=\"watchers\" href=\"https://github.com/jaywcjlove/react-hotkeys/watchers\" />\n          <Github.Social type=\"followers\" href=\"https://github.com/jaywcjlove?tab=followers\" />\n        </Github>\n        <GitHubCorners href=\"https://github.com/jaywcjlove/react-hotkeys\" target=\"__blank\" />\n        <Hotkeys\n          keyName=\"shift+a,alt+s,shift+/\"\n          onKeyDown={this.onKeyDown.bind(this)}\n          onKeyUp={this.onKeyUp.bind(this)}\n        >\n          <div>\n            <div>\n              {this.state.info}\n            </div>\n            <div className=\"shortcut-info\">\n              <div className={shortcut === 'shift+a' ? 'active' : ''}>\n                <kbd>shift</kbd> + <kbd>a</kbd>\n              </div>\n              <div className={shortcut === 'alt+s' ? 'active' : ''}>\n                <kbd>alt</kbd> + <kbd>s</kbd>\n              </div>\n              <div className={shortcut === 'shift+/' ? 'active' : ''}>\n                <kbd>shift</kbd> + <kbd>/</kbd>\n              </div>\n            </div>\n            {output && (\n              <div className=\"info\">\n                {output}\n              </div>\n            )}\n          </div>\n        </Hotkeys>\n        <MarkdownPreview className=\"App-markdown\" source={MDStr.replace(/([\\s\\S]*)<!--dividing-->/, '')} />\n      </div>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}